@page "/"
@using Bookstore.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<h1><strong>Available books:</strong></h1>
@if (books == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="normal" style="width:80%">
        <tr class="normal">
            <td class="normal" style="width: 30%">
                <table>
                    <tr>
                        <td>
                            <div style="text-align: center"><b style="font-size: 25px; font-family: 'Poppins', sans-serif;">Price Range</b></div>
                            <label>Max Price = @nfilter.MaxPrice</label><input type="range" class="slider" min="@nfilter.MinPrice" max="@filter.MaxPrice" step="1" @bind="@nfilter.MaxPrice" /><br />
                            <label>Min Price = @nfilter.MinPrice</label><input type="range" class="slider" min="0" max="@nfilter.MaxPrice " step="1" @bind="@nfilter.MinPrice" />
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <div style="text-align: center"><b style="font-size: 25px; font-family: 'Poppins', sans-serif;">Genres</b></div>
                            @foreach (var genre in filter.Genres)
                            {
                                <input type="checkbox" class="check" @onclick="@(() => { ChangeGenre(genre); })" /><label>@genre</label><br />
                            }
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <div style="text-align: center"><b style="font-size: 25px; font-family: 'Poppins', sans-serif;">Languages</b></div>
                            @foreach (var language in filter.Languages)
                            {
                                <input type="checkbox" class="check" @onclick="@(() => { ChangeLanguage(language); })" /><label>@language</label><br />
                            }
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <div>
                                <input type="checkbox" class="check" @onclick="@(() => { nfilter.AvailableOnly = !nfilter.AvailableOnly; })" /><label>Only show available</label>
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <div>
                                <input type="checkbox" class="check" @onclick="@(() => { nfilter.PartOfSeries = !nfilter.PartOfSeries; })" /><label>Only show in series</label>
                            </div>
                        </td>
                    </tr>
                </table>
                <div style="text-align: center">
                    <button class="filter" @onclick="FilterBooks"><b style="font-size: 30px; font-family: 'Poppins', sans-serif;">Filter</b></button>
                </div></td>
            <td class="normal" style="width: 70%">
                @if (books.Length == 0)
                {
                    <p style="font-size: 30px">There are no books matching your filters</p>
                }
                <table>
                    @foreach (var book in books)
                    {
                        <tr>
                            <td class="image">
                                <img src="@book.Cover" />
                            </td>
                            <td class="text">
                                @if (book.Series != null)
                                {
                                    <p style="font-size: 30px">@book.Series vol @book.Number</p>
                                }
                                <p style="font-size: 30px">@book.Title</p>
                                <p style="font-size: 25px">@string.Join(", ", book.Authors)</p>
                                @if (!book.IsAvailable())
                                {
                                    <p style="color: #a6a6a6">
                                        @book.Status
                                    </p>
                                }
                                else
                                {
                                    <p style="color: #6600ff">
                                        @book.Status
                                    </p>
                                }
                                <div style="text-align: left">@string.Join(" ", book.Genres)</div>
                            </td>
                            <td class="buttons">
                                <p><button class="details" @onclick="@(() => { OpenDetails(book.BookId); })" /></p>
                                <p><button class="comments" /></p>
                                @if (book.IsAvailable())
                                {
                                    <p><button class="cart" @onclick="@(() => { AddToCart(book); })" /></p>
                                }
                            </td>
                        </tr>
                        @if (addedBookId == book.BookId)
                        {
                            <tr>
                                <td>

                                </td>
                                <td>
                                    <p style="vertical-align:bottom; color: #c604fc; text-align: center; font-family: 'Poppins', sans-serif;"><b>@response</b></p>
                                </td>
                                <td>

                                </td>
                            </tr>
                        }
                    }
                </table>
            </td>
        </tr>
    </table>
}

@code{
    private RetrieveBook[] books;
    private Filter filter;
    private Filter nfilter;
    private string user;
    private string response;
    private int addedBookId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            user = authState.User.Identity.Name;
            filter = await Http.GetFromJsonAsync<Filter>($"/filters/over");
            var result = await Http.PostAsJsonAsync("books", filter);
            books = await result.Content.ReadFromJsonAsync<RetrieveBook[]>();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        nfilter = new Filter
        {
            Genres = new List<string>(),
            Languages = new List<string>(),
            MaxPrice = filter.MaxPrice,
            MinPrice = filter.MinPrice,
            AvailableOnly = false,
            PartOfSeries = false
        };
    }

    private void OpenDetails(int id)
    {
        navigationManager.NavigateTo($"/details/{id}");
    }

    private async void AddToCart(RetrieveBook book)
    {
        var result = await Http.PostAsJsonAsync($"/cart/{user}", book);
        response = await result.Content.ReadAsStringAsync();
        addedBookId = book.BookId;
        StateHasChanged();
    }

    private void ChangeGenre(string genre)
    {
        if (nfilter.Genres.Contains(genre))
        {
            nfilter.Genres.Remove(genre);
        }
        else
        {
            nfilter.Genres.Add(genre);
        }
        StateHasChanged();
    }

    private void ChangeLanguage(string language)
    {
        if (nfilter.Languages.Contains(language))
        {
            nfilter.Languages.Remove(language);
        }
        else
        {
            nfilter.Languages.Add(language);
        }
        StateHasChanged();
    }

    private async void FilterBooks()
    {
        var result = await Http.PostAsJsonAsync("books", nfilter);
        books = await result.Content.ReadFromJsonAsync<RetrieveBook[]>();
        StateHasChanged();
    }

}

<style>
    p {
        font-family: 'Poppins', sans-serif;
    }
    table.normal {
        border-style: none;
        border-right-style: none;
        border-left-style: none;
    }

    td.normal {
        border-style: none;
    }

        td.normal:first-child {
            border-style: none;
            border-right-style: none;
            border-left-style: none;
        }

        td.normal:last-child {
            border-style: none;
            border-right-style: none;
            border-left-style: none;
        }
    img {
        width: 110%;
        height: 110%;
    }

    h1 {
        text-align: center;
        font-family: 'Poppins', sans-serif;
    }

    table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0 10px;
        margin-left: auto;
        margin-right: auto;
        table-layout: fixed;
    }

    tr {
        border-spacing: 10px;
        vertical-align: top;
        text-align: left;
        font-family: 'Poppins', sans-serif;
        font-weight: bold;
        font-size: 20px;
        padding: 10px;
    }

    td {
        border: 2px solid;
        border-style: solid none;
        border-color: #a6a6a6;
        padding: 11px;
    }

    .buttons {
        width: 20%;
    }

    td:first-child {
        border-left-style: solid;
        border-top-left-radius: 11px;
        border-bottom-left-radius: 11px;
        border-color: #a6a6a6;
    }

    td:last-child {
        border-right-style: solid;
        border-bottom-right-radius: 11px;
        border-top-right-radius: 11px;
        border-color: #a6a6a6;
    }

    td {
        padding: 20px;
    }

        td.image {
            width: 230px;
        }

    button {
        padding: 0px;
        border: none;
        border-radius: 50%;
    }

    .details {
        background-image: url(/Images/InactiveArrow.PNG);
        background-size: cover;
        width: 75px;
        height: 75px;
    }

        .details:hover {
            background-image: url(/Images/ActiveArrow.PNG);
            background-size: cover;
            width: 75px;
            height: 75px;
        }

    .comments {
        background-image: url(/Images/InactiveComment.PNG);
        background-size: cover;
        width: 75px;
        height: 75px;
    }

        .comments:hover {
            background-image: url(/Images/ActiveComment.PNG);
            background-size: cover;
            width: 75px;
            height: 75px;
        }

    .cart {
        background-image: url(/Images/InactiveBasket.PNG);
        background-size: cover;
        width: 75px;
        height: 75px;
    }

        .cart:hover {
            background-image: url(/Images/ActiveBasket.PNG);
            background-size: cover;
            width: 75px;
            height: 75px;
        }

    .slider {
        -webkit-appearance: none;
        height: 3px;
        background: #6600ff;
        width: 90%;
        border-radius: 50%;
    }

        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: #6600ff;
            cursor: pointer;
        }

    .check {
        -webkit-appearance: none;
        height: 20px;
        width: 20px;
        background: #a6a6a6;
        margin-right: 10px;
        border-radius: 10px;
    }
        .check:hover {
            background: #6600ff;
        }

        .check:checked {
            background: #6600ff;
        }

    .filter {
        width: 80%;
        height: 20%;
        background: #a6a6a6;
        border: none;
        border-radius: 20px;
        color: white;
        font-family: 'Poppins', sans-serif;
    }

        .filter:hover {
            width: 80%;
            height: 20%;
            background: #6600ff;
            color: white;
        }
</style>
